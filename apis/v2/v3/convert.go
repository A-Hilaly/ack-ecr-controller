// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v2

import (
	ctrlrtconversion "sigs.k8s.io/controller-runtime/pkg/conversion"

	v2 "github.com/aws-controllers-k8s/ecr-controller/apis/v1"
)

// ConvertTo converts this Repository to the Hub version (v2).
func (src *Repository) ConvertTo(dstRaw ctrlrtconversion.Hub) error {
	dst := &Repository{}
	//unsupported: struct
	dst.Spec.ImageTagMutability = src.Spec.ImageTagMutability
	dst.Spec.Name = src.Spec.Name

	if src.Spec.X != nil {
		Xcopy := &X{}
		if src.Spec.X.Y != nil {
			Ycopy := &Y{}
			if src.Spec.X.Y.Z != nil {
				Zcopy := &Z{}
				Zcopy.S = src.Spec.X.Y.Z.S
				if src.Spec.X.Y.Z.Tags != nil {
					tags_copy := make([]*Tag, 0, len(src.Spec.X.Y.Z.Tags))
					for _, t := range src.Spec.Tags {
						tags_copy = append(tags_copy, (*Tag)(t))
					}
					Zcopy.Tags = tags_copy
				}

				Ycopy.Z = Zcopy
			}
			Ycopy.S = src.Spec.X.Y.S
			Ycopy.I = src.Spec.X.Y.I
			// copy X.Y
			Xcopy.Y = Ycopy

			// copy X.S
			Xcopy.S = src.Spec.X.S
		}
		dst.Spec.X = Xcopy
	}

	src.Spec.EncryptionConfiguration.DeepCopyInto(dst.Spec.EncryptionConfiguration)

	//unsupported: struct
	//unsupported: list
	return nil
}

// ConvertFrom converts the Hub version (v2) to this Repository.
func (dst *Repository) ConvertFrom(srcRaw ctrlrtconversion.Hub) error {
	src := srcRaw.(*v2.Repository)
	//unsupported: struct
	dst.Spec.ImageTagMutability = src.Spec.ImageTagMutability
	dst.Spec.Name = src.Spec.Name
	//unsupported: struct
	//unsupported: list
	return nil
}
