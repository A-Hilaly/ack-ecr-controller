// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1



import (
    "encoding/json"
    "fmt"

    ctrlrtconversion "sigs.k8s.io/controller-runtime/pkg/conversion"
    ctrlrt "sigs.k8s.io/controller-runtime"
    ackrtwh "github.com/aws-controllers-k8s/runtime/pkg/webhook"

    v2 "github.com/aws-controllers-k8s/ecr-controller/apis/v2"
)

var (
    _ = fmt.Printf
    _ = json.Marshal
)

func init() {
    webhook := ackrtwh.New(
        "conversion",
        "Repository",
        "v1",
        setupWebhookWithManager,
    )
    if err := ackrtwh.RegisterWebhook(webhook); err != nil {
        msg := fmt.Sprintf("cannot register webhook: %v", err)
        panic(msg)
    }
}

func setupWebhookWithManager(mgr ctrlrt.Manager) error {
	return ctrlrt.NewWebhookManagedBy(mgr).
		For(&Repository{}).
		Complete()
}

// ConvertTo converts this Repository to the Hub version (v2).
func (src *Repository) ConvertTo(dstRaw ctrlrtconversion.Hub) error {
	dst := dstRaw.(*v2.Repository)
	objectMetadataCopy := src.ObjectMeta

	// FieldChangeType: intact
	if src.Spec.EncryptionConfiguration != nil {
		encryptionConfigurationCopy := &v2.EncryptionConfiguration{}
		encryptionConfigurationCopy.EncryptionType = src.Spec.EncryptionConfiguration.EncryptionType
		encryptionConfigurationCopy.KMSKey = src.Spec.EncryptionConfiguration.KMSKey
		dst.Spec.EncryptionConfiguration = encryptionConfigurationCopy
	}

	// FieldChangeType: renamed
	dst.Spec.ITM = src.Spec.ImageTagMutability
	// FieldChangeType: intact
	dst.Spec.Name = src.Spec.Name
	// FieldChangeType: intact
	if src.Spec.ScanConfig != nil {
		imageScanningConfigurationCopy := &v2.ImageScanningConfiguration{}
		imageScanningConfigurationCopy.ScanOnPush = src.Spec.ScanConfig.ScanOnPush
		dst.Spec.ScanConfig = imageScanningConfigurationCopy
	}

	// FieldChangeType: intact
	if src.Spec.Tags != nil {
		tagListCopy := make([]*v2.Tag, 0, len(src.Spec.Tags))
		for i, element := range src.Spec.Tags {
			_ = i // non-used value guard.
			elementCopy := &v2.Tag{}
			if element != nil {
				tagCopy := &v2.Tag{}
				tagCopy.Key = element.Key
				tagCopy.Value = element.Value
				elementCopy = tagCopy
			}

			tagListCopy = append(tagListCopy, elementCopy)
		}
		dst.Spec.Tags = tagListCopy
	}


	dst.ObjectMeta = objectMetadataCopy
	return nil
}

// ConvertFrom converts the Hub version (v2) to this Repository.
func (dst *Repository) ConvertFrom(srcRaw ctrlrtconversion.Hub) error {
	src := srcRaw.(*v2.Repository)
	objectMetadataCopy := src.ObjectMeta

	// FieldChangeType: intact
	if src.Spec.EncryptionConfiguration != nil {
		encryptionConfigurationCopy := &EncryptionConfiguration{}
		encryptionConfigurationCopy.EncryptionType = src.Spec.EncryptionConfiguration.EncryptionType
		encryptionConfigurationCopy.KMSKey = src.Spec.EncryptionConfiguration.KMSKey
		dst.Spec.EncryptionConfiguration = encryptionConfigurationCopy
	}

	// FieldChangeType: renamed
	dst.Spec.ImageTagMutability = src.Spec.ITM
	// FieldChangeType: intact
	dst.Spec.Name = src.Spec.Name
	// FieldChangeType: intact
	if src.Spec.ScanConfig != nil {
		imageScanningConfigurationCopy := &ImageScanningConfiguration{}
		imageScanningConfigurationCopy.ScanOnPush = src.Spec.ScanConfig.ScanOnPush
		dst.Spec.ScanConfig = imageScanningConfigurationCopy
	}

	// FieldChangeType: intact
	if src.Spec.Tags != nil {
		tagListCopy := make([]*Tag, 0, len(src.Spec.Tags))
		for i, element := range src.Spec.Tags {
			_ = i // non-used value guard.
			elementCopy := &Tag{}
			if element != nil {
				tagCopy := &Tag{}
				tagCopy.Key = element.Key
				tagCopy.Value = element.Value
				elementCopy = tagCopy
			}

			tagListCopy = append(tagListCopy, elementCopy)
		}
		dst.Spec.Tags = tagListCopy
	}


	dst.ObjectMeta = objectMetadataCopy
	return nil
}

// Assert convertible interface implementation Repository
var _ ctrlrtconversion.Convertible = &Repository{}